"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path_1 = require("path");
const util_1 = require("util");
const yargs_1 = __importDefault(require("yargs"));
const index_1 = require("./index");
const readFile = util_1.promisify(fs.readFile);
function parseArgs(args) {
    const parsed = yargs_1.default
        .usage('Prompts user for environment variables and generates .env files based on a .env.example file\n')
        .usage('Usage:\n  $0 -o [outputFile] -i [exampleFile]')
        .epilog('This project is part of Twilio Labs. Please file any issues github.com/twilio-labs/configure-env')
        .example('npx configure-env', 'Reads a .env.example file in the current directory and creates a .env file')
        .example('$0 | cat', 'The output can be either written to a file or piped to another process')
        .options({
        output: {
            type: 'string',
            default: '.env',
            alias: 'o',
            desc: 'Location of the .env file that should be written',
        },
        input: {
            type: 'string',
            default: '.env.example',
            alias: 'i',
            desc: 'Location of input .env.example file for prompts',
        },
        verbose: { type: 'boolean', default: false },
    })
        .parse(args);
    return parsed;
}
exports.parseArgs = parseArgs;
async function getExampleContent(fileName) {
    const fullPath = path_1.resolve(process.cwd(), fileName);
    return readFile(fullPath, 'utf8');
}
exports.getExampleContent = getExampleContent;
function getOutputStream(fileName) {
    const fullPath = path_1.resolve(process.cwd(), fileName);
    return fs.createWriteStream(fullPath);
}
exports.getOutputStream = getOutputStream;
async function cli(args, ttyOutStream, promptStream) {
    const options = parseArgs(args);
    const exampleFileContent = await getExampleContent(options.input);
    const output = !ttyOutStream.isTTY
        ? ttyOutStream
        : getOutputStream(options.output);
    const config = {
        exampleFileContent,
        output,
        promptStream,
    };
    return index_1.configureEnv(config);
}
exports.cli = cli;
